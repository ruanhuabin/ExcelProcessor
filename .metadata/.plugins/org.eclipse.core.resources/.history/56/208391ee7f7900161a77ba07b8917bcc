#!/usr/bin/env python
# encoding: utf-8
#from util import writeWordBook, initNewWordBook, writeDataToColumn, extractMZExpectData,\
#    loadData

from util import writeWordBook, initNewWordBook, writeDataToColumn, extractMZExpectData, loadData,\
    extractLSMARTData, isAllNA, extractCPLSData, extractIPData, isContainPass,\
    extractLSData, extractRTMeasuredData, extractMZDeltaData
from subprocess import Popen
from popen2 import popen4
from os import system
from time import time, sleep
from constant import *
from __builtin__ import sorted
import operator
import inspect

newScreenBook = initNewWordBook()
screenDataBook = loadData("small-screen.xlsx")
sheetNames = list(screenDataBook)
sheetNames.sort()
print sheetNames
print len(sheetNames)

# compoundNameTitle = "Compound Name"
# mzExpectedTitle = "m/z (Expected)"

compoundNames = set()
for currSheetName in sheetNames:
    sheetData = screenDataBook[currSheetName]
    compoundNameData  = sheetData[compoundNameTitle]
    print currSheetName, ": ", compoundNameData
    #unique compund names from each sheet data
    for name in compoundNameData:
        compoundNames.add(name)



print "Final CompundNames: ", compoundNames
print "len = %d " % len(compoundNames)

#Append compound name data to first column of Sheet-1
compoundNames = list(compoundNames)
compoundNames.sort()
sheetOne = newScreenBook.create_sheet("Sheet-1", 0)
#Append title
sheetOne.append([compoundNameTitle, mzExpectedTitle, rtMeasuredTitle, libraryScoreTitle, ipTitle, lsTitle, rtRangeTitle, mzDeltaTitle])
writeDataToColumn(newScreenBook, "Sheet-1", compoundNames, 1)

#start to append m/z (expected) data to Sheet-1
mzInfo = extractMZExpectData(screenDataBook)
mzInfoList = []
for compoundName in compoundNames:
    mzExpectValue = mzInfo.get(compoundName)
    mzInfoList.append(mzExpectValue)

print "mzInfo: ", mzInfo
print "mzInfoListLen = ", len(mzInfoList)

writeDataToColumn(newScreenBook, "Sheet-1", mzInfoList, 2)

#Start to extract RT Value
lsmartInfo = extractLSMARTData(screenDataBook)
print lsmartInfo
cpNames = list(lsmartInfo)
print cpNames
print len(cpNames)

cpNames.sort()
cprtInfo = []
for currCPName in cpNames:
    lsmartValue = lsmartInfo.get(currCPName)
    
    print currCPName, ":"
    lsInfo = []
    maInfo = []
    for currLSMARTValue in lsmartValue:
        #print currLSMARTValue
        rtMeasuredValue = currLSMARTValue[1]
        lsInfo.append(rtMeasuredValue)
        maValue = currLSMARTValue[2]
        maInfo.append(maValue)
    print lsInfo
    print isAllNA(lsInfo)
    print maInfo
    
    isAllNAValue = isAllNA(lsInfo)
    if(isAllNAValue == False):
        sortLSMARTValue = sorted(lsmartValue, key = operator.itemgetter(1), reverse = True)
        #sorted(data.iteritems(),key=operator.itemgetter(1,0),reverse=True)
    else:
        sortLSMARTValue = sorted(lsmartValue, key = operator.itemgetter(2), reverse = True)
     
    print lsmartValue   
    print sortLSMARTValue
    
    cprtInfo.append(sortLSMARTValue[0][3])
print cprtInfo
writeDataToColumn(newScreenBook, "Sheet-1", cprtInfo, 3)

#start to extract library score



def genLibraryScoreColumn():
    cplsInfo = extractCPLSData(screenDataBook)
    print "cplsInfo: ", cplsInfo
    cpNames = list(cplsInfo)
    cpNames.sort()
    lsFinalInfo = []
    for currCPName in cpNames:
        rtMeasuredValue = cplsInfo[currCPName]
        lsInfo = []
        newLSInfo = []
        for i in range(len(rtMeasuredValue)):
            lsInfo.append(rtMeasuredValue[i][1])
            
        isAllNAValue = isAllNA(lsInfo)
        
        lsFinalValue = "N/A"
        if(isAllNAValue == False):
            lsInfo.sort(cmp=None, key=None, reverse=True)
            lsFinalValue = lsInfo[0]
            
        print currCPName, ":", lsInfo
        
        lsFinalInfo.append(lsFinalValue)
    
    print lsFinalInfo
    
    writeDataToColumn(newScreenBook, "Sheet-1", lsFinalInfo, 4)
    
def genIPColumn():
    ipInfoDict = extractIPData(screenDataBook)
    print "ipInfoList = ", ipInfoDict
    cpNames = list(ipInfoDict)
    cpNames.sort()
    print "cpNames = ", cpNames
    
    ipFinalInfo = []
    
    for currCPName in cpNames:
        ipValue = ipInfoDict[currCPName]
        ipInfoList = []
        print currCPName, ":",
        for i in range(len(ipValue)):
            ipInfoList.append(ipValue[i][1])
        flag = isContainPass(ipInfoList)
        
        if(flag == True):
            ipFinalInfo.append("Pass")
        else:
            ipFinalInfo.append("Fail")
        
        print ipInfoList
    
    print "IP Final Info: " , ipFinalInfo
    writeDataToColumn(newScreenBook, "Sheet-1", ipFinalInfo, 5)
    
    
def genLSColumn():
    lsInfoDict = extractLSData(screenDataBook)
    print "lsInfoList = ", lsInfoDict
    cpNames = list(lsInfoDict)
    cpNames.sort()
    print "cpNames = ", cpNames
    
    lsFinalInfo = []
    
    for currCPName in cpNames:
        rtMeasuredValue = lsInfoDict[currCPName]
        lsInfoList = []
        print currCPName, ":",
        for i in range(len(rtMeasuredValue)):
            lsInfoList.append(rtMeasuredValue[i][1])
        flag = isContainPass(lsInfoList)
        
        if(flag == True):
            lsFinalInfo.append("Pass")
        else:
            lsFinalInfo.append("Fail")
        
        print lsInfoList
    
    print "LS Final Info: " , lsFinalInfo
    writeDataToColumn(newScreenBook, "Sheet-1", lsFinalInfo, 6)
    
def genRTRangeColumn():
    rtMeasuredInfoDict = extractRTMeasuredData(screenDataBook)
    print "rtMeasuredInfoList = ", rtMeasuredInfoDict
    cpNames = list(rtMeasuredInfoDict)
    cpNames.sort()
    print "cpNames = ", cpNames
    
    rtMeasuredFinalInfo = []
    
    for currCPName in cpNames:
        rtMeasuredValue = rtMeasuredInfoDict[currCPName]
        rtMeasuredInfoList = []
        print currCPName, ":",
        for i in range(len(rtMeasuredValue)):
            rtMeasuredInfoList.append(rtMeasuredValue[i][1])
        
        rtMeasuredInfoList.sort()
        
        print rtMeasuredInfoList
        
        rangeValue = rtMeasuredInfoList[-1] - rtMeasuredInfoList[0]
        #rtMeasuredFinalInfo.append([currCPName, rangeValue])
        rtMeasuredFinalInfo.append(rangeValue)
    
    print "RT Range Final Info: " , rtMeasuredFinalInfo
    writeDataToColumn(newScreenBook, "Sheet-1", rtMeasuredFinalInfo, 7)
    
def genMZDeltaColumn():
    mzDeltaInfoDict = extractMZDeltaData(screenDataBook)
    print "MZDeltaInfoList = ", mzDeltaInfoDict
    cpNames = list(mzDeltaInfoDict)
    cpNames.sort()
    print "cpNames = ", cpNames
    
    mzDeltaFinalInfo = []
    
    for currCPName in cpNames:
        rtMeasuredValue = mzDeltaInfoDict[currCPName]
        rtMeasuredInfoList = []
        print currCPName, ":",
        for i in range(len(rtMeasuredValue)):
            rtMeasuredInfoList.append(rtMeasuredValue[i][1])
        
        rtMeasuredInfoList.sort()
        
        print rtMeasuredInfoList
        
        rangeValue = rtMeasuredInfoList[-1] - rtMeasuredInfoList[0]
        #mzDeltaFinalInfo.append([currCPName, rangeValue])
        mzDeltaFinalInfo.append(rangeValue)
    
    print "RT Range Final Info: " , mzDeltaFinalInfo
    writeDataToColumn(newScreenBook, "Sheet-1", mzDeltaFinalInfo, 7)
        
        
    
genLibraryScoreColumn()
genIPColumn()
genLSColumn()
genRTRangeColumn()
    



    
    
        
        
        




writeWordBook(newScreenBook, "screen-filter.xlsx")



excelProcess = popen4("start excel D:\workspace-excelprocess-final\ExcelProcessor/screen-filter.xlsx")
print("Enter to finish")
import sys
line = sys.stdin.readline()
#sleep(100)
Popen("taskkill /F /im EXCEL.EXE",shell=True)


