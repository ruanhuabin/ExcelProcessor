# encoding: utf-8
from Logger import MyLogger
import logging
import math
import re
import pprint
#import operator

logger = MyLogger("Lipid-Logger", logging.INFO).getLogger()
ms2Window = 0.2

def makeTestData():
    dataBook = {}
    fileBook1 = {}
    fileBook2 = {}
    
    
    fileBook1["LipidIon"] = ["ChE(18:3)+H", "ChE(20:5)+NH4", "ChE(20:5)+H", "ChE(22:4)+NH4", "ChE(20:5)+H"]
    fileBook1["Rt"] = ["10.1", "10.2", "10.3","10.4", "11.80"]
    fileBook1["TopRT"] = ["10.25", "10.42", "10.45", "10.88", "11.64"]
    fileBook1["Formula"] = ["fm1", "fm2", "fm2", "fm2", "fm2"]
    fileBook1["Grade"] = ["A", "A", "B", "B", "D"]
    
    fileBook2["LipidIon"] = ["NE(18:3)+H", "ChE(20:5)+NH4", "NE(20:5)+H", "ChE(22:4)+NH4", "ChE(20:5)+H"]
    fileBook2["Rt"] = ["10.1", "10.2", "10.3","10.4", "10.4"]
    fileBook2["TopRT"] = ["10.25", "10.42", "10.45", "10.92", "10.55"]
    fileBook2["Formula"] = ["fm1", "fm2", "fm2", "fm2", "fm2"]
    fileBook2["Grade"] = ["A", "D", "C", "D", "B"]
    
    dataBook["f1"] = fileBook1;
    dataBook["f2"] = fileBook2;
    
    
    return dataBook        
        
def makeTuple(dataBook):
    logger.info("Start to make databook as tuple list")    
    lipidInfo = []    
    files = list(dataBook)
    for f in files:
        fileData = dataBook[f]
        lipidIons = fileData["LipidIon"]
        Rts = fileData["Rt"]
        TopRTs = fileData["TopRT"]
        Formulas = fileData["Formula"]
        Grades = fileData["Grade"]
        
        logger.info("lipidIons:" + str(lipidIons)) 
        logger.info("Rts:" + str(Rts))
        logger.info("TopRTs:" + str(TopRTs))
        logger.info("Formulas:" + str(Formulas))
        logger.info("Grades:" + str(Grades))
        logger.info("--------------------------------------------------------------")
        
        columnDataSize = len(lipidIons)
        for i in range(columnDataSize):
            diff = math.fabs(float(Rts[i]) - float(TopRTs[i]))
            li = (lipidIons[i], Rts[i], TopRTs[i], diff, Formulas[i], Grades[i])
            lipidInfo.append(li)
    
    #lipidInfo = sorted(lipidInfo,key=operator.itemgetter(3,0),reverse=False)            
    logger.info("End to make databook as tuple list")    
    return lipidInfo     

#在lipidInfo中删除RT和TopRT差值大于0.2的元组
def rm0dot2(lipidInfo):
    
    logger.info("Start to remove item that the gap between RT and TopRT is bigger than ms2Window(0.2)")
    newLipidInfo = []
    for item in lipidInfo:
        diff = item[3]
        if(diff <= ms2Window):
            newLipidInfo.append(item)
    
    logger.info("End to remove item that the gap between RT and TopRT is bigger than ms2Window(0.2)")
    
    return newLipidInfo


#计算每一种化合物在所有文件中的TopRT的平均值
def calTopRTAvg(lipidInfo):
    avgTable = {};
    topRTTable = {}
    for item in lipidInfo:
        lipidName = item[0]
        topRT = item[2]
        
        if(topRTTable.has_key(lipidName)):
            topRTTable[lipidName].append(float(topRT))
        else:
            topRTTable[lipidName] = [float(topRT)]


    logger.info("topRT Table = " + str(topRTTable))
    
    for(k, v) in topRTTable.iteritems():
        if(len(v) == 0):
            avgTable[k] = 0.0
        else:
            avgTable[k] = sum(v)/len(v)
        
    logger.info("avg Table = " + str(avgTable))
    return (avgTable, topRTTable)

#拿到所有相同formula对应的(化合物,topRT值)
def getFormulaMap(lipidInfo):
    
    logger.info("Start to get lipid names with same formula")
    f2c = {}
    
    
    
    for item in lipidInfo:
        formula = item[4]
        lipidName = item[0]
        topRT = item[2]
        if(f2c.has_key(formula)):            
            f2c[formula].append((lipidName, topRT))
            
        else:
            f2c[formula] = [(lipidName, topRT)]
            
    
    logger.info("end to get lipid names with same formula")
    return f2c
               
#获取化合物括号部分数字对的个数。
def getGroupNum(compndName):
    
    parenthesesPart = re.search('\(.*\)', compndName).group();   
    #print("parenthesesPart = " + str(parenthesesPart))
    semicolon = re.findall(':', str(parenthesesPart))  
    
    #print("semicolon = " + str(semicolon))    
    
    return len(semicolon)
#提取符合条件2.1的(化合物,toprt)，同时将该化合物信息从候选的lipidInfo中剔除
def p2dot1(lipidInfo):
    
    vldLipidInfo = []
    restLipidInfo = []
    for item in lipidInfo:
        num = getGroupNum(item)
        if(num > 1):
            restLipidInfo.append(item)
            continue
        
        
                                   

if __name__ == '__main__':

    
    #得到目录./lipddata下的所有文件的内容，以dict的形式组织，该dict的key是文件名，value是文件的内容，文件的内容又
    #以dict的形式进行组织，key是对应文件中的每1列的标题，value是该列对应的内容
    #dataBook = loadAllTextFile("./lipiddata", logger)
    dataBook = makeTestData()
    lipidInfo = makeTuple(dataBook)
    logger.info("Before removing item that the gap between RT and TopRT is bigger than ms2Window(0.2)")
    pprint.pprint(lipidInfo)
    logger.info("After removing item that the gap between RT and TopRT is bigger than ms2Window(0.2)")
    lipidInfo = rm0dot2(lipidInfo)
    
    (c2TopRTAvg, c2TopRT) = calTopRTAvg(lipidInfo)
    
    f2c = getFormulaMap(lipidInfo)
    logger.info("lipid name with same formula: " + str(f2c))
    
    
    pass