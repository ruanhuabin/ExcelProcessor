# encoding: utf-8
'''
Created on 2016��9��14��

@author: ruanhuabin
'''
from Tkinter import *
from tkFileDialog import askopenfilename
from tkFileDialog import askdirectory
from _functools import partial

#from Screen import init

from Screen import init, printDict, checkFileValid, extractCompoundNameColumn,\
    extractMZExpectColumn, genRTColumn, genLibraryScoreColumn, genIPColumn,\
    genLSColumn, genRTRangeColumn, genMZDeltaColumn, genMeasuredAreaColumn,\
    genRTMeasuredColumn
from constant import *
from util import extractMZExpectData, writeWordBook
import tkMessageBox
#from Quan import loadData, extractColumnToFile
#import thread
import time
from threading import Thread
from Logger import MyLogger
from util import getCurrTime
import os
import logging
class ScreenFrame:
    def __init__(self, master):
        frame = Frame(master,width=400,height=600)
        frame.pack()   
        
        self.inputFolderPath =StringVar()
        self.inputFolderLabel = Label(frame,textvariable=self.inputFolderPath).grid(row=0,columnspan=2)
        
        self.inputFolder = StringVar()
        self.log_file_btn = Button(frame, text="Select Lipid File Folder", command=self.selectInputFolder).grid(row=1, columnspan=2)
        
        
        self.outputFolderPath = StringVar()
        self.outputFolderLabel = Label(frame,textvariable = self.outputFolderPath).grid(row = 2, columnspan = 2)
        self.output_folder_btn = Button(frame, text="Output Folder", command=self.selectOutputFolder,width=40).grid(row=3, columnspan=2)
        
        self.blankText = StringVar()
        self.blankLabel = Label(frame,textvariable = self.blankText).grid(row = 4, columnspan = 2)
        
        self.output_filename_label = Label(frame, text="Output File Name:          ")
        self.output_filename_label.grid(row=5, columnspan=2)
       
        self.output_filename_entry = Entry(frame, width=30, bd = 4)
        self.output_filename_entry.grid(row=6, column=0, columnspan=2)
        
        
        f = frame
        xscrollbar = Scrollbar(f, orient=HORIZONTAL)
        xscrollbar.grid(row=12, column=0, sticky=N+S+E+W)
 
        yscrollbar = Scrollbar(f)
        yscrollbar.grid(row=11, column=1, sticky=N+S+E+W)
 
        self.text_field = Text(f, wrap=NONE,
                    xscrollcommand=xscrollbar.set,
                    yscrollcommand=yscrollbar.set)
        self.text_field.grid(row=11, column=0)
 
        xscrollbar.config(command=self.text_field.xview)
        yscrollbar.config(command=self.text_field.yview)
      

        
        
        self.blankText = StringVar()
        self.blankLabel = Label(frame,textvariable = self.blankText).grid(row = 7, columnspan = 2)
        
        self.start_run_btn = Button(frame, text="Start Processing", command=partial(self.startProcessing, self.text_field), width=40)
        self.start_run_btn.grid(row=8, columnspan=2)
        
        self.blankText = StringVar()
        self.blankLabel = Label(frame,textvariable = self.blankText).grid(row = 9, columnspan = 2)
        
        
        self.blankText2 = StringVar()
        self.blankLabel2 = Label(frame,textvariable = self.blankText2).grid(row = 13, columnspan = 2)
        
        self.ms2Windowlabel = Label(frame, text="ms2window:          ")
        self.ms2Windowlabel.grid(row=14, columnspan=2)
       
        self.ms2WindowEntry = Entry(frame, width=20, bd = 4)
        self.ms2WindowEntry.grid(row=15,columnspan=2)
        
        self.blankText3 = StringVar()
        self.blankLabel3 = Label(frame,textvariable = self.blankText2).grid(row = 16, columnspan = 2)
        
        self.topRTRange = Label(frame, text="TopRTRange:          ")
        self.topRTRange.grid(row=17, columnspan=2)
       
        self.topRTRange = Entry(frame, width=20, bd = 4)
        self.ms2WindowEntry.grid(row=18,columnspan=2)
        
        
        
        
        
        self.counter = 0
        
        self.inputDataBook = {}
        self.outputDataBook = {}
        self.inputFilename = ""
        
        self.logger = MyLogger("Lipid-Logger", logging.INFO).getLogger()
 
        
    def selectInputFolder(self):
        inputFolder = askdirectory()
        self.inputFolder.set(inputFolder) 
        self.inputFolderPath.set(inputFolder)
        
        self.outputFolderPath.set(inputFolder)
        outputFilename = "lipid.xlsx"        
        self.output_filename_entry.delete(0, END)
        self.output_filename_entry.insert(0, outputFilename)
        
       

    def selectOutputFolder(self):
        outputFolder = askdirectory()
        self.outputFolderPath.set(outputFolder)
        
    def run_thread(self, text_field, outputFilename):
        
        text_field.insert(INSERT, "[%s]: Start to load files in folder: %s\n" % (getCurrTime(), self.inputFolderPath.get()))   
        
        self.logger.info( "Start to load files in folder:" + self.inputFolderPath.get())     
        
        
         
        rowTitleMust = [compoundNameTitle, mzExpectedTitle, libraryScoreTitle, measuredAreaTitle, ipTitle, lsTitle, rtMeasuredTitle, mzDeltaTitle]
        text_field.insert(INSERT, "[%s]: Start Loading Data: %s\n" %(getCurrTime(), self.inputFolderPath.get()))
        self.logger.info("Start loading data: " + self.inputFolderPath.get())
        [self.inputDataBook, self.outputDataBook] = init(self.inputFilename, self.logger)
        text_field.insert(INSERT, "[%s]: Finish Loading Data: %s\n" %(getCurrTime(), self.inputFolderPath.get()))
        self.logger.info("Finish loading data: " + self.inputFolderPath.get())
        
        
        #print "self.inputDataBook = ", self.inputDataBook        
        [missingNum, missingRowTitleDict] = checkFileValid(self.inputDataBook,  rowTitleMust )
        text_field.insert(INSERT, "[%s]: Check file validation complete\n" %(getCurrTime()))
        self.logger.info("Check file validation complete")
        self.counter += 1
        if(missingNum > 0):
            self.logger.error("Some worksheet missing some column(s):")
            #printDict(missingRowTitleDict)
            self.logger.error(str(missingRowTitleDict))
            text_field.insert(INSERT, "[%s]: Error: Missing Columns: %s\n" %(getCurrTime(), str(missingRowTitleDict)))
            
            text_field.insert(INSERT, "[%s]: Error: Some worksheet missing some column(s), see missing column above\n" %(getCurrTime()))
            
            self.start_run_btn.configure(state=NORMAL)
            raise ValueError("Error: Some worksheet missing some column(s), see missing column above")
        
        
        text_field.insert(INSERT, "[%s]: Start to extracting data\n" %(getCurrTime())) 
        
        compoundNames = extractCompoundNameColumn(self.inputDataBook, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract compound names success: compound Names are: %s\n" %(getCurrTime(), str(compoundNames)))
        
        extractMZExpectColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract m/z expected data success\n" %(getCurrTime()))
        
        genRTColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract RT Value success\n" %(getCurrTime()))
        
        genLibraryScoreColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract library score success\n" %(getCurrTime()))
        
        genIPColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract  IP success\n" %(getCurrTime()))
        
        genLSColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract LS data success\n" %(getCurrTime()))
        
        genRTRangeColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract RT Range success\n" %(getCurrTime()))
        
        genMZDeltaColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract M/Z Delta success\n" %(getCurrTime()))
        
        genMeasuredAreaColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract Measure Area success\n" %(getCurrTime()))
        
        genRTMeasuredColumn(self.inputDataBook, compoundNames, self.outputDataBook, self.logger)
        text_field.insert(INSERT, "[%s]: Extract RT Measure success\n" %(getCurrTime()))
        
        writeWordBook(self.outputDataBook, outputFilename)
        text_field.insert(INSERT, "[%s]: Job Complete Successfully, Output File Name: %s!!! \n" %(getCurrTime(), outputFilename))
        
        text_field.see("end")
        time.sleep(1)
        
        
        self.logger.info("Job Complete Successfully, Output File Name: %s!!! \n" %(outputFilename))
        self.start_run_btn.configure(state=NORMAL)
        
    
    def startProcessing(self, text_field):
        if(self.inputFolderPath.get() == ""):
            tkMessageBox.showerror("Error", "Please select a folder that contains lipid data")
            return
        if(self.outputFolderPath.get() == ""):
            self.outputFolderPath.set("./")

        if(self.output_filename_entry.get() == ""):           
            tkMessageBox.showerror("Error", "Please enter a filename for the output file" )
            return
            
        outputFolderPath = self.outputFolderPath.get()
        if(outputFolderPath[-1] != '/'):
            outputFolderPath = outputFolderPath + "/"
            
        outputFilename = outputFolderPath + self.output_filename_entry.get()
        
        filenameExtension = outputFilename.split(".")[-1]
        if(filenameExtension != "xlsx"):
            outputFilename = outputFilename + ".xlsx"
        
        text_field.insert(INSERT, "[%s]: Result will be saved to: %s \n" %(getCurrTime(), outputFilename))
        self.start_run_btn.configure(state=DISABLED)
        newThread = Thread(target = self.run_thread, args=(text_field, outputFilename))
        newThread.start()
          
       
               
       



def run_screen_processor():  
    mainFrame = Tk()
    mainFrame.title("Lipid Data Processor")
    mainFrame.geometry("600x800")
    mainFrame.resizable(False, False)
    app = ScreenFrame(mainFrame)
    mainFrame.mainloop()


if __name__ == '__main__':
    run_screen_processor()

    pass