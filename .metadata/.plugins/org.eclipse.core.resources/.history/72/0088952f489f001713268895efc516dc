# encoding: utf-8
from openpyxl import Workbook
from openpyxl import Workbook
from openpyxl.compat import range
from openpyxl.cell import get_column_letter
from openpyxl import load_workbook
from Logger2 import MyLogger
import logging
import math
import re
import pprint
from subprocess import Popen
from popen2 import popen4
import glob
import time
#import operator

logger = MyLogger().getLogger()
fileHandler = logger.handlers[1]
logFilename = fileHandler.baseFilename
logFileHandle = open(logFilename, "w")

def nonBlankLines(f):
    """
    Used for romoved lines that start with #
    """
    for l in f:
        line = l.rstrip()
        if line and line[0] != '#':
            yield line

def readTextFile(fileName): 
    content = []  
    with open(fileName) as f:
        for line in nonBlankLines(f):
            content.append(line)
    
    return content

def loadTextFile(fileName):
    """
    Load text file to a dict, the key of dict is the column name, value is the column value
    """
    lines = readTextFile(fileName)
    headerLine = []
    if(len(lines) > 0):
        headerLine = lines[0].split('\t')
    
    logger.info("header num: {0}, headers are: {1}".format(len(headerLine), headerLine))
    headers = []
    dataDict = {}
    for header in headerLine:
        headers.append(header)
        dataDict[header] = {}
    
    
    
    #transpose the list of lists
    #content2是一个list，其的每一个元素也是一个list，每个元素的list中包含文件中一行的内容，每个元素list中的每一个元素是该行中的某一列对应的内容，简单来说：content2中的内容就是将文件中的
    #内容按照矩阵元素的方式进行存储了。
    """
    Organize each line of file in lines to a list of list content, 
    """
    content = []
    for item in lines:
        item = item.split('\t')
        """
        Padding empty items to each element in content so that length of items in content is equal to number of headers
        The reason we need to do this is because we need to transpose the content in the following part 
        """
        itemLen = len(item)
        headerNum = len(headerLine)
        if(itemLen < headerNum):
            for i in xrange(0, headerNum - itemLen):
                item.append('')
        content.append(item)
        
    contentT = [[x[i] for x in content] for i in range(len(content[0]))]
    lineNum = 0
    logger.debug("Data in colum style: ")
    for item in contentT:        
        lineNum += 1
        itemLen = len(item)        
        logger.debug("%d:%d:%s" % (lineNum, itemLen, str(item)))
    
    for item in contentT:
        header = item[0]
        item.pop(0)
        dataDict[header] = item
        
        
    return dataDict




if __name__ == "__main__":
    logger.info("Start to extract data from lipid text file")
    loadTextFile("lipid-data-4lines.txt")